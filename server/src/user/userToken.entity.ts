/**
 * Dr.Kit
 * this is mediio Dr.Kit api server
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * it used for user verification
 */

import { Field, ID, ObjectType } from '@nestjs/graphql';
import { IsDate, IsEmpty, IsNotEmpty, MaxLength } from 'class-validator';
import {
  Column,
  Entity,
  JoinColumn,
  ManyToOne,
  PrimaryGeneratedColumn,
} from 'typeorm';
import { User } from './user.entity';

@ObjectType()
@Entity()
export class UserToken {
  constructor(userId: string, type: UserToken.Type);
  constructor(userId: string, type: UserToken.Type, businessId: string);
  constructor(userId: string, type: UserToken.Type, businessId?: string) {
    this.userId = userId;
    this.type = type;
    this.businessId = businessId;
  }

  @Field(() => ID)
  @IsNotEmpty()
  @PrimaryGeneratedColumn({ type: 'bigint', unsigned: true, comment: '번호' })
  id: string;

  @Field(() => ID)
  @IsNotEmpty()
  @Column({
    type: 'bigint',
    unsigned: true,
    nullable: true,
    comment: '회원번호',
  })
  userId: string;

  @Field()
  @IsNotEmpty()
  @MaxLength(255)
  @Column({ type: 'varchar', length: 20, comment: '종류' })
  type: string;

  @Field()
  @IsNotEmpty()
  @MaxLength(40)
  @Column({ type: 'varchar', length: 100, comment: '코드(토큰)' })
  token: string;

  @Field()
  @IsNotEmpty()
  @IsDate()
  @Column({ type: 'datetime' })
  createdAt: string;

  @Field({ nullable: true })
  @IsNotEmpty()
  @IsDate()
  @Column({ type: 'datetime' })
  updatedAt: string;

  @Field()
  @IsNotEmpty()
  @IsDate()
  @Column({ type: 'datetime' })
  expiredAt: string;

  @Field(() => User)
  @ManyToOne(() => User, (user) => user.UserTokens)
  @JoinColumn({
    name: 'userId',
    referencedColumnName: 'id',
  })
  User: User;

  // HACK: for manager registration validation
  @IsEmpty()
  businessId?: string;
}

export namespace UserToken {
  export type Type =
    | 'FIND_PW'
    | 'REGISTER'
    | 'RESET_PW'
    | 'APPLY'
    | 'REFRESH_TOKEN'
    | 'VERIFY_PHONE';
  export const Type = {
    FindPw: 'FIND_PW' as Type,
    ResetPw: 'RESET_PW' as Type,
    VerifyPhone: 'VERIFY_PHONE' as Type,
    Apply: 'APPLY' as Type, // apply user to business
    Register: 'REGISTER' as Type, // final registration
    RefreshToken: 'REFRESH_TOKEN' as Type, // refresh token
  };
}
